diff a/lib/services/conversion_service.dart b/lib/services/conversion_service.dart	(rejected hunks)
@@ -1,24 +1,21 @@
+import 'dart:convert';
+import 'dart:io';
+import 'package:http/http.dart' as http;
 import '../models/converter_type.dart';
 
 class ConversionService {
-  // Mock exchange rates (in real app, these would come from API)
-  static const Map<String, double> _mockExchangeRates = {
-    'USD': 1.0,
-    'EUR': 0.85,
-    'GBP': 0.73,
-    'JPY': 110.0,
-    'CAD': 1.25,
-    'AUD': 1.35,
-    'CHF': 0.92,
-    'CNY': 6.45,
-    'INR': 74.5,
-    'BRL': 5.2,
-  };
-
-  List<String> getUnits(ConverterType type) {
+  final String unirateApiKey;
+  ConversionService(this.unirateApiKey);
+
+  Map<String, double>? _cachedRates;
+  DateTime? _lastFetch;
+  static const _cacheDuration = Duration(minutes: 10);
+
+  Future<List<String>> getUnits(ConverterType type) async {
     switch (type) {
       case ConverterType.currency:
-        return _mockExchangeRates.keys.toList();
+        final rates = await _fetchCurrencyRates();
+        return rates.keys.toList();
       case ConverterType.length:
         return ['Meter', 'Kilometer', 'Centimeter', 'Millimeter', 'Mile', 'Yard', 'Foot', 'Inch'];
       case ConverterType.weight:
@@ -42,12 +39,11 @@ class ConversionService {
     }
   }
 
-  double convert(ConverterType type, double value, String fromUnit, String toUnit) {
+  Future<double> convert(ConverterType type, double value, String fromUnit, String toUnit) async {
     if (fromUnit == toUnit) return value;
-
     switch (type) {
       case ConverterType.currency:
-        return _convertCurrency(value, fromUnit, toUnit);
+        return await _convertCurrency(value, fromUnit, toUnit);
       case ConverterType.length:
         return _convertLength(value, fromUnit, toUnit);
       case ConverterType.weight:
@@ -71,15 +67,31 @@ class ConversionService {
     }
   }
 
-  double _convertCurrency(double value, String fromUnit, String toUnit) {
-    final fromRate = _mockExchangeRates[fromUnit];
-    final toRate = _mockExchangeRates[toUnit];
-    
+  Future<Map<String, double>> _fetchCurrencyRates() async {
+    if (_cachedRates != null && _lastFetch != null && DateTime.now().difference(_lastFetch!) < _cacheDuration) {
+      return _cachedRates!;
+    }
+    final url = 'https://api.unirateapi.com/api/rates?api_key=${unirateApiKey.trim()}&from=USD';
+    final response = await http.get(Uri.parse(url));
+    if (response.statusCode == 200) {
+      final data = json.decode(response.body);
+      final rates = Map<String, double>.from((data['rates'] as Map));
+      rates['USD'] = 1.0; // Ensure base is present
+      _cachedRates = rates;
+      _lastFetch = DateTime.now();
+      return rates;
+    } else {
+      throw Exception('Failed to fetch currency rates');
+    }
+  }
+
+  Future<double> _convertCurrency(double value, String fromUnit, String toUnit) async {
+    final rates = await _fetchCurrencyRates();
+    final fromRate = rates[fromUnit];
+    final toRate = rates[toUnit];
     if (fromRate == null || toRate == null) {
       throw Exception('Invalid currency unit');
     }
-    
-    // Convert to USD first, then to target currency
     final usdValue = value / fromRate;
     return usdValue * toRate;
   }
